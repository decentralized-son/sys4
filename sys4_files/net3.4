{ array tools & neural network }

: # * + ;
: a+ 4 * + ;
: a- 4 * - ;
: addra >r I 1+ cells alloc dup r> swap ! 1 a+ ;						{ no name array allocation }
: 2addra 2dup swap , , * addra ;										{ 2d array -2 w -3 h -1 l: h w -- addr }
: array addra [comp] const ;											{ array with length at [-1] }
: n@ do dup @ swap 1 a+ loop drop ;										{ multifetch: addr n -- ... }
: n! do dup rot ! 1 a+ loop drop ;										{ multistore: addr n -- }
: [[ ;			
: ]]  a+ @ ;
: ]]! a+ ! ;
: h[ 0 , HERE @ ;														{ starts array marker, skips 1 for length }
: ]addr >r I HERE @ - 4 / abs I -1 a+ ! r> ;							{ stores length, address only array }
: ]array ]addr [comp] const ;											{ compiles array needs a ,  b , etc }	
: lst2arr h[ swap begin dup car , cdr dup NIL? until drop ]addr ;		{ converts a list to array: lst -- arr } 
: )a ) lst2arr ;
: )array )a [comp] const ;


: arrhrn SPC 91 emit do dup @ SPC D. 1 a+ loop drop SPC 93 emit ;
: arrprn SPC 91 emit do dup @ . 1 a+ loop drop SPC 93 emit ;			{ display array: addr len -- }
: arrprnc dup -1 ]] arrprn ;											{ display array w count on [0]: addr -- }
: arr@prn SPC 91 emit >r I -1 ]] do J I ]] @ . loop 
	rdrop SPC 93 emit ;													{ displays the contents: arr -- } 

	



{ neural net ----------------------------------------------------------------- }
var inputs																		{ 1st layer inputs, write here }
var net	
var outp						
0 const nx																		{ network xsize }
: nx! lit nx 8 + ! ;
: #a over1 -2 ]] # ;
: ]n #a ]] ;									
: ]n! #a ]]! ;									
: ]n2 swap nx # ]] ;
: ]x -2 ]] ;
: ]y -3 ]] ;


: sigm dup abs 1.0 + f/ ;														{ approx sigmoid x -- sx }

: netwidth -1 ]] 1- 3 * 1+ ;													{ net width: arr -- width }
: netdepth >r 0 I -1 ]] 1- do J I ]] J I 1+ ]] * max loop 1+ rdrop ; 			{ net height w bias: arr -- height }
: netsze dup netwidth swap netdepth * ;											{ net size: arr -- sze }
: netlloc here4 dup netdepth swap netwidth 2addra ;								{ nn alloc: arr -- addr }


( 2 3 1 )array nns
nns netlloc const net


: nedh CR [msg] [i]" -2 ]] 1- 3 / do TAB TAB [msg] [w]" TAB TAB [msg] [e]" TAB TAB [msg] [h]" loop ;
: nedisp >r I nedh CR I ]y do J ]x do X I J ]n D. TAB loop CR loop rdrop ;  
	


: wts-rndc >r I ]y do 1.0 rnd J over1 I ]n! loop rdrop drop ; 
: wts-init >r 1 dup I wts-rndc I ]x 3 / 1- do 3 + dup J wts-rndc loop rdrop drop ;

net wts-init
net nedisp


{ calculation & misc }	


{ backprop }









	

